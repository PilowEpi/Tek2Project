A la votre Group                                    M. Ducatillon
                                                    M. Roger
                                                    L. Christ
                                                    November 2030
                Teams Communication Protocol (TCP)

This memo is the official specification of the Teams
Communication Protocol (TCP). Destribution of this memo
is limited to the creator and the staff of Epitech.

1. INTRODUCTION

The objective of TCP is to promote sharing work and Communication
between colleagues. To encourage use of Work from home and
prevent Covid 29 to spread.

2. TERMINOLOGY

user connection

    The communication between the server and a Client. For
    the exchange of commands and replies. This connection
    don't follow the Telnet Protocol.

EOL

    The end-of-line sequence define the separation of printing
    lines. The sequence is a Line Feed.

EOF

    The end-of-file condition defines the end of a communication.

TCP commands

    A set of commands that comprise the control information flowing
    from the user-TCP to the server-TCP process.

server-TCP process

    A process which perform the function of receiving and sending
    message between user-TCP(s). The functions consists of a Protocol
    interpreter (PI) and a data transfer process.

server-PI

    The server protocol interpreter "listens" on Port L for a
    connection from a user-PI and establisheds a control communication
    connection. It receives standard TCP commands from the user-PI,
    sends replies, and governs the server-TCP

user-TCP process

    A set of functions including a protocol interpreter (PI),
    and a user interface which together perform the function
    of file transfer in cooperation with one or more server-TCP
    processes. The user interface allows a local language to be used
    in the command-reply dialogue with the user.

user-PI

    The user protocol interpreter (PI) initiates the communication
    connection from its port U to the server-TCP process, initiates
    TCP commands, and governs the user-TCP.

2.1.  THE TCP MODEL

      With the above definitions in mind, the following model (shown in
      Figure 1) may be diagrammed for an FTP service.

                                            -------------
                                            |/---------\|
                                            ||   User  ||    --------
                                            ||Interface|<--->| User |
                                            |\----^----/|    --------
                  ----------                |     |     |
                  |/------\|  TCP Commands  |/----V----\|
                  ||Server|<---------------->|   User  ||
                  ||  PI  ||   TCP Replies  ||    PI   ||
                  |\--^---/|                |\----^----/|
                  |   |    |                |     |     |
                  |/--V---\|                |/----V----\|
                  ||Server|<                ||  User   ||
                  || TCP  ||                ||   TCP   ||
                  |\------/|                |\---------/|
                  ----------                -------------

                        Figure 1  Model for TCP Use

    In the model described in Figure 1, the user PI initiates the 
    communication connection. At the initiation of the user,
    standard TCP commands are generated by the user-PI and 
    transmitted to the server process via the communication connection.
    Standard replies are sent from the server-PI to the user-PI over
    the communication connection in response to the commands.

3.  COMMUNICATION TYPES

    Communication representation are handled in TCP as ASCII, no
    other type of data representation should be used in the Teams
    communication protocol. Rules decided by L. Christ and no one
    can change it. (Except M. Ducatillon)
    All communication should be sent ended with a Line Feed (Aka '\n')

3.1 COMMUNICATION RULES

    All communication should be sent ended with a Line Feed (Aka '\n')
    All communication should be started with the prefix "TCP"
    All names (Teams, Channels, Thread Title) must have a length of 32 or less
    All description (Teams, Channels) must have a length of 255 or less
    All body (Threads message and answers) must have a length of 512 or less

4. TEAMS COMMUNICATION FUNCTIONS

    The communication channel from the user-PI to the server-PI is
    established as a TCP (Aka OldTCP) connection from the user to the server
    port.  The user PI is responsible for sending TCP
    commands and interpreting the replies received; the server-PI
    interprets commands, sends replies.
    The TCP replies are discussed in the next section.  In
    the description of a few of the commands in this section, it is
    helpful to be explicit about the possible replies.

4.1. TCP COMMANDS

4.1.1 ACCESS CONTROL COMMANDS

    The following commands specify access control identifiers
    (command codes are shown in parentheses).

    TCP LOGIN USER_NAME (LOGIN)

        Allow a user to login with the user_name, USER_NAME must
        be unique.

    TCP LOGOUT (LOGOUT)

        Allow the user to quit the connection with the server.

4.1.2 TEAMS CONTROL COMMANDS

    The following commands specify teams control identifiers
    (command codes are shown in parentheses).
    (??) signify that argument is not mandatory.

    TCP SUB TEAM_UUID (SUB)

        Allow a user to subscribe to a team.

    TCP SUB? TEAM_UUID(??)

        Allow a user to get the list of subscribed teams or
        the list of people subscribed to team TEAM_UUID

    TCP UNSUB TEAM_UUID

        Allow a user to unsubscribe to a team.

    TCP USET TEAM_UUID

        Allow user to select a team to use.

    TCP USEC CHANNEL_UUID

        Allow user to select a channel. (Only if a team is selected)

    TCP USETR THREAD_UUID

        Allow user to select a thread. (Only if a team and a channel
        is selected)

    TCP CREATE ARG1 ARG2(??)

        Allow the user to create the subressource
        ARG1 can be TEAM_NAME |Â CHANNEL_NAME | THREAD_TITLE
        | COMMENT_BODY
        ARG2 can be TEAM_DESCRIPTION | CHANNEL_DESCRIPTION
        | THREAD_MESSAGE

    TCP LIST
    
        when TEAM_UUID is set, list all channels
        when TEAM_UUID and CHANNEL_UUID are set, list all threads
        when TEAM_UUID and CHANNEL_UUID and THREAD_UUID list all replies
        otherwise list all the teams

    TCP INFO

        when TEAM_UUID is set, display team infos
        when TEAM_UUID and CHANNEL_UUID are set, display channel infos
        when TEAM_UUID and CHANNEL_UUID and THREAD_UUID, display theads infos
        otherwise display logged user infos.

    TCP HMES USER_UUID

        list all messages exchange with a user.

    TCP USER USER_UUID

        get information about a user

    TCP USERS
    
        get the list of all users that exist on the domain

    TCP MES USER_UUID MESSAGE_BODY

        send a MESSAGE_BODY to USER_UUID

4.2. REPLY CODES

4.2.1. REPLY CODES BY FUNCTION GROUP

    MATR

        Describe a syntax error command dont exist

    ROGM

        Describe a syntax in the parameters

    LOCK

        Bad sequence of command (Aka not logged)

    JESUS

        Command accepted

    JUDA

        Connection will close (Aka after LOGOUT)

    MATD

        Internal server error (When there is an error
        and you dont now why)

    LOUC

        Alias of JESUS, can be use for any Successful command

4.3. CLIENT EVENT CODES

4.3.1. CLIENT CODES

    TCP EV1
    
        Client logged in

    TCP EV2

        Client logged out

    TCP EV3

        Private message received from another client

    TCP EV4

        Thread reply received from server

    TCP EV5

        Team has been created

    TCP EV6

        Channel has been created

    TCP EV7

        Thread has been created

4.3.2. CLIENT PRINT CODES

    TCP EV8

        Client print the list of users

    TCP EV9

        Client print the list of teams

    TCP EV10

        Client print the list of channels of a specific team

    TCP EV11

        Client print the list of threads of a specific channel

    TCP EV12

        Client print the list of replies of a specific thread

    TCP EV13

        Client print the list of private messages

4.3.3. CLIENT ERROR CODES

    TCP EV14

        Unknown team

    TCP EV15

        Unknown channel

    TCP EV16

        Unknown thread

    TCP EV17

        Unknown user

    TCP EV18

        Unauthorized

    TCP EV19

        Already exist (can be team, channel or thread)

4.3.4. CLIENT SERVER PRINT CODES

    TCP EV20

        Client users
    
    TCP EV21

        Client teams

    TCP EV22

        Client channels

    TCP EV23

        Client threads

    TCP EV24

        Client teams createds

    TCP EV25

        Client channels createds

    TCP EV26

        Client threads createds

    TCP EV27

        Client replies created

    TCP EV28

        Client "subscribed"

    TCP EV29

        Client "unsubscribed"